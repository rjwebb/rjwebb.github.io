{"version":3,"sources":["GetIssues.js","LastUpdated.js","helpers.js","IssueEntry.js","ListIssues.js","Paginator.js","SiteDescription.js","App.js","serviceWorker.js","index.js"],"names":["GetIssues","props","state","response","getPage","bind","this","pageNum","axios","get","then","setState","data","wrappedRender","Component","LastUpdated","lastUpdated","Fragment","date","day","getDate","monthIndex","getMonth","year","getFullYear","formatDate","Date","parse","IssueEntry","issue","url","parts","replace","split","repositoryName","userName","extractRepoDetails","repository_url","repositoryUrl","htmlUrl","html_url","title","createdAt","moment","created_at","fromNow","poster","user","login","ListGroup","Item","href","target","rel","ListIssues","issues","map","idx","key","Paginator","numPages","currentPage","loadPage","paginatorItem","label","elemKey","Pagination","onClick","e","active","disabled","className","Array","fill","m","i","SiteDescription","Card","Body","App","Container","Navbar","Brand","responseData","page_num","num_pages","Row","Col","updated_at","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8fdfe12.chunk.js","sourcesContent":["import axios from 'axios';\nimport { Component } from 'react';\n\n\nclass GetIssues extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      response: null\n    };\n\n    this.getPage = this.getPage.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPage(0);\n  }\n\n  getPage(pageNum) {\n    axios.get('https://open-issues.s3-eu-west-1.amazonaws.com/open_issues_' + pageNum + '.json')\n      .then((response) => {\n        this.setState({\n          response: response.data\n        });\n      });\n  }\n\n  render() {\n    const { response } = this.state;\n    const { wrappedRender } = this.props;\n    return wrappedRender(response, this.getPage);\n  }\n\n}\n\nexport default GetIssues;\n","import React from 'react';\n\nimport { formatDate } from './helpers';\n\n\nconst LastUpdated = ({ lastUpdated }) => {\n\n  return (\n    <React.Fragment>\n      Last updated: {formatDate(new Date(Date.parse(lastUpdated)))}\n    </React.Fragment>\n  );\n}\n\nexport default LastUpdated;\n","\nconst extractRepoDetails = (url) => {\n  /**\n   * Splits the URL for a GitHub repository into two parts:\n   * - the repositoryName\n   * - the userName\n   */\n\n  const prefix = \"https://api.github.com/repos/\";\n  const parts = url.replace(prefix, \"\").split(\"/\");\n\n  return {\n    repositoryName: parts[1],\n    userName: parts[0]\n  };\n}\n\n\nfunction formatDate(date) {\n  var monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n\n  return day + ' ' + monthNames[monthIndex] + ' ' + year;\n}\n\n\nexport { extractRepoDetails, formatDate };\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport moment from 'moment';\nimport { extractRepoDetails } from './helpers';\n\n\nconst IssueEntry = ({ issue }) => {\n  const { repositoryName, userName } = extractRepoDetails(issue.repository_url);\n  const repositoryUrl = \"https://github.com/\" + userName + \"/\" + repositoryName;\n  const htmlUrl = issue.html_url;\n  const title = issue.title;\n\n  const createdAt = moment(issue.created_at).fromNow();\n\n  const poster = issue.user.login;\n\n  return (\n    <ListGroup.Item>\n      <a href={repositoryUrl} target=\"_blank\" rel=\"noopener noreferrer\">{ userName }/{ repositoryName }</a>\n      &nbsp;-&nbsp;\n      <a href={ htmlUrl } target=\"_blank\" rel=\"noopener noreferrer\">{ title }</a>\n      <br/>\n      posted { createdAt } by { poster }\n    </ ListGroup.Item>\n  );\n};\n\nexport default IssueEntry;\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport IssueEntry from './IssueEntry';\n\n\nconst ListIssues = ({ issues }) => {\n  return (\n    <ListGroup>\n      { issues.map((issue, idx) => (\n        <IssueEntry issue={ issue } key={ idx } />\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default ListIssues;\n","import React from 'react';\n\nimport Pagination from 'react-bootstrap/Pagination';\n\n\nconst Paginator = (props) => {\n  const { numPages, currentPage, loadPage } = props;\n\n  const paginatorItem = (label, elemKey, pageNum) => (\n    <Pagination.Item\n        key={elemKey}\n        onClick={(e) => loadPage(pageNum)}\n        active={ currentPage === pageNum }\n        disabled={ currentPage === pageNum } >\n      {label}\n    </Pagination.Item>\n  );\n\n  return (\n    <Pagination className={\"mt-2\"} >\n      { paginatorItem(\"First\", \"first\", 0) }\n      { Array(numPages).fill().map((m, i) => paginatorItem(i + 1, i, i)) }\n      { paginatorItem(\"Last\", \"last\", numPages - 1) }\n    </Pagination>\n  );\n};\n\nexport default Paginator;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\n\nconst SiteDescription = (props) => {\n\n  return (\n    <Card className={\"mb-2\"}>\n      <Card.Body>\n        <p>\n          Learning Python? One of the best ways to hone your skills is to contribute to\n          free/open-source software. This site lists open issues on GitHub repositories\n          using Python that have been marked as \"beginner friendly\".\n        </p>\n        If you would like your project added to/removed from this list, please send an email to\n        rjw_software@protonmail.com .\n      </Card.Body>\n    </Card>\n  )\n};\n\n\nexport default SiteDescription;\n","import React from 'react';\nimport './App.css';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\n\nimport GetIssues from './GetIssues';\nimport LastUpdated from './LastUpdated';\nimport ListIssues from './ListIssues';\nimport Paginator from './Paginator';\nimport SiteDescription from './SiteDescription';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Navbar>\n        <Navbar.Brand>\n          Python Issues for Beginners\n        </Navbar.Brand>\n      </Navbar>\n      <SiteDescription />\n      <GetIssues wrappedRender={ (responseData, getPage) =>\n        responseData ? (\n          <React.Fragment>\n            <ListIssues issues={ responseData.issues } />\n            <Paginator currentPage={ responseData.page_num }\n                       numPages={ responseData.num_pages }\n                       loadPage={ getPage }/>\n            <Row className={\"mb-2\"}>\n              <Col>\n                <LastUpdated lastUpdated={ responseData.updated_at } />\n              </Col>\n            </Row>\n          </React.Fragment>\n        ) : (\n          <Row>\n            <Col>\n              <ListGroup>\n                <ListGroup.Item>\n                  Loading data...\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n        )}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}